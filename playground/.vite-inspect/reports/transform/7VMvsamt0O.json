{"resolvedId":"/Users/bryce/i/vue3-page-transition/playground/node_modules/.vite/deps/vite-ssg.js?v=7d84460d","transforms":[{"name":"vite:optimized-deps","result":"import {\n  createHead\n} from \"./chunk-34TZLNIG.js\";\nimport {\n  createMemoryHistory,\n  createRouter,\n  createWebHistory\n} from \"./chunk-L5H4ESUF.js\";\nimport {\n  createApp,\n  createSSRApp,\n  defineComponent,\n  onMounted,\n  ref\n} from \"./chunk-IGCPF6BW.js\";\n\n// ../node_modules/.pnpm/vite-ssg@0.20.2_nxo4dxrwzv3surdng3zh52e6ju/node_modules/vite-ssg/dist/chunks/state.mjs\nfunction deserializeState(state) {\n  try {\n    return JSON.parse(state || \"{}\");\n  } catch (error) {\n    console.error(\"[SSG] On state deserialization -\", error, state);\n    return {};\n  }\n}\n\n// ../node_modules/.pnpm/vite-ssg@0.20.2_nxo4dxrwzv3surdng3zh52e6ju/node_modules/vite-ssg/dist/chunks/ClientOnly.mjs\nfunction documentReady(_passThrough) {\n  if (document.readyState === \"loading\") {\n    return new Promise((resolve) => {\n      document.addEventListener(\"DOMContentLoaded\", () => resolve(_passThrough));\n    });\n  }\n  return Promise.resolve(_passThrough);\n}\nvar ClientOnly = defineComponent({\n  setup(props, { slots }) {\n    const mounted = ref(false);\n    onMounted(() => mounted.value = true);\n    return () => {\n      return mounted.value && slots.default && slots.default({});\n    };\n  }\n});\n\n// ../node_modules/.pnpm/vite-ssg@0.20.2_nxo4dxrwzv3surdng3zh52e6ju/node_modules/vite-ssg/dist/index.mjs\nfunction ViteSSG(App, routerOptions, fn, options = {}) {\n  const {\n    transformState,\n    registerComponents = true,\n    useHead = true,\n    rootContainer = \"#app\"\n  } = options;\n  const isClient = typeof window !== \"undefined\";\n  async function createApp$1(client = false, routePath) {\n    var _a;\n    const app = client ? createApp(App) : createSSRApp(App);\n    let head;\n    if (useHead) {\n      head = createHead();\n      app.use(head);\n    }\n    const router = createRouter({\n      history: client ? createWebHistory(routerOptions.base) : createMemoryHistory(routerOptions.base),\n      ...routerOptions\n    });\n    const { routes } = routerOptions;\n    if (registerComponents)\n      app.component(\"ClientOnly\", client ? ClientOnly : { render: () => null });\n    const appRenderCallbacks = [];\n    const onSSRAppRendered = client ? () => {\n    } : (cb) => appRenderCallbacks.push(cb);\n    const triggerOnSSRAppRendered = () => {\n      return Promise.all(appRenderCallbacks.map((cb) => cb()));\n    };\n    const context = {\n      app,\n      head,\n      isClient,\n      router,\n      routes,\n      onSSRAppRendered,\n      triggerOnSSRAppRendered,\n      initialState: {},\n      transformState,\n      routePath\n    };\n    if (client) {\n      await documentReady();\n      context.initialState = (transformState == null ? void 0 : transformState(window.__INITIAL_STATE__ || {})) || deserializeState(window.__INITIAL_STATE__);\n    }\n    await (fn == null ? void 0 : fn(context));\n    app.use(router);\n    let entryRoutePath;\n    let isFirstRoute = true;\n    router.beforeEach((to, from, next) => {\n      if (isFirstRoute || entryRoutePath && entryRoutePath === to.path) {\n        isFirstRoute = false;\n        entryRoutePath = to.path;\n        to.meta.state = context.initialState;\n      }\n      next();\n    });\n    if (!client) {\n      const route = (_a = context.routePath) != null ? _a : \"/\";\n      router.push(route);\n      await router.isReady();\n      context.initialState = router.currentRoute.value.meta.state || {};\n    }\n    const initialState = context.initialState;\n    return {\n      ...context,\n      initialState\n    };\n  }\n  if (isClient) {\n    (async () => {\n      const { app, router } = await createApp$1(true);\n      await router.isReady();\n      app.mount(rootContainer, true);\n    })();\n  }\n  return createApp$1;\n}\nexport {\n  ViteSSG\n};\n//# sourceMappingURL=vite-ssg.js.map\n","start":1663126497406,"end":1663126497446},{"name":"vite:import-analysis","result":"import {\n  createHead\n} from \"/node_modules/.vite/deps/chunk-34TZLNIG.js?v=7d84460d\";\nimport {\n  createMemoryHistory,\n  createRouter,\n  createWebHistory\n} from \"/node_modules/.vite/deps/chunk-L5H4ESUF.js?v=7d84460d\";\nimport {\n  createApp,\n  createSSRApp,\n  defineComponent,\n  onMounted,\n  ref\n} from \"/node_modules/.vite/deps/chunk-IGCPF6BW.js?v=7d84460d\";\n\n// ../node_modules/.pnpm/vite-ssg@0.20.2_nxo4dxrwzv3surdng3zh52e6ju/node_modules/vite-ssg/dist/chunks/state.mjs\nfunction deserializeState(state) {\n  try {\n    return JSON.parse(state || \"{}\");\n  } catch (error) {\n    console.error(\"[SSG] On state deserialization -\", error, state);\n    return {};\n  }\n}\n\n// ../node_modules/.pnpm/vite-ssg@0.20.2_nxo4dxrwzv3surdng3zh52e6ju/node_modules/vite-ssg/dist/chunks/ClientOnly.mjs\nfunction documentReady(_passThrough) {\n  if (document.readyState === \"loading\") {\n    return new Promise((resolve) => {\n      document.addEventListener(\"DOMContentLoaded\", () => resolve(_passThrough));\n    });\n  }\n  return Promise.resolve(_passThrough);\n}\nvar ClientOnly = defineComponent({\n  setup(props, { slots }) {\n    const mounted = ref(false);\n    onMounted(() => mounted.value = true);\n    return () => {\n      return mounted.value && slots.default && slots.default({});\n    };\n  }\n});\n\n// ../node_modules/.pnpm/vite-ssg@0.20.2_nxo4dxrwzv3surdng3zh52e6ju/node_modules/vite-ssg/dist/index.mjs\nfunction ViteSSG(App, routerOptions, fn, options = {}) {\n  const {\n    transformState,\n    registerComponents = true,\n    useHead = true,\n    rootContainer = \"#app\"\n  } = options;\n  const isClient = typeof window !== \"undefined\";\n  async function createApp$1(client = false, routePath) {\n    var _a;\n    const app = client ? createApp(App) : createSSRApp(App);\n    let head;\n    if (useHead) {\n      head = createHead();\n      app.use(head);\n    }\n    const router = createRouter({\n      history: client ? createWebHistory(routerOptions.base) : createMemoryHistory(routerOptions.base),\n      ...routerOptions\n    });\n    const { routes } = routerOptions;\n    if (registerComponents)\n      app.component(\"ClientOnly\", client ? ClientOnly : { render: () => null });\n    const appRenderCallbacks = [];\n    const onSSRAppRendered = client ? () => {\n    } : (cb) => appRenderCallbacks.push(cb);\n    const triggerOnSSRAppRendered = () => {\n      return Promise.all(appRenderCallbacks.map((cb) => cb()));\n    };\n    const context = {\n      app,\n      head,\n      isClient,\n      router,\n      routes,\n      onSSRAppRendered,\n      triggerOnSSRAppRendered,\n      initialState: {},\n      transformState,\n      routePath\n    };\n    if (client) {\n      await documentReady();\n      context.initialState = (transformState == null ? void 0 : transformState(window.__INITIAL_STATE__ || {})) || deserializeState(window.__INITIAL_STATE__);\n    }\n    await (fn == null ? void 0 : fn(context));\n    app.use(router);\n    let entryRoutePath;\n    let isFirstRoute = true;\n    router.beforeEach((to, from, next) => {\n      if (isFirstRoute || entryRoutePath && entryRoutePath === to.path) {\n        isFirstRoute = false;\n        entryRoutePath = to.path;\n        to.meta.state = context.initialState;\n      }\n      next();\n    });\n    if (!client) {\n      const route = (_a = context.routePath) != null ? _a : \"/\";\n      router.push(route);\n      await router.isReady();\n      context.initialState = router.currentRoute.value.meta.state || {};\n    }\n    const initialState = context.initialState;\n    return {\n      ...context,\n      initialState\n    };\n  }\n  if (isClient) {\n    (async () => {\n      const { app, router } = await createApp$1(true);\n      await router.isReady();\n      app.mount(rootContainer, true);\n    })();\n  }\n  return createApp$1;\n}\nexport {\n  ViteSSG\n};\n//# sourceMappingURL=vite-ssg.js.map\n","start":1663126497447,"end":1663126497448,"order":"normal"}]}
